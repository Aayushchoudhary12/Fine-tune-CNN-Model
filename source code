# hi this is aayush i tried to fine tune a Resnet model i had i'll explain the codes in coming steps
import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# here i Defined paths
dataset_dir = '/path/to/UTKFace'

datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,  
    horizontal_flip=True,  
    rotation_range=20,
    zoom_range=0.2
)

# here i provided with Training and validation data generators
train_generator = datagen.flow_from_directory(
    dataset_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='sparse', 
    subset='training'
)

validation_generator = datagen.flow_from_directory(
    dataset_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='sparse',
    subset='validation'
)
#here i exported a pre trained ResNet50 model
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D
from tensorflow.keras.models import Model

# Loaded the pre-trained ResNet50 model
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freezed the base model
for layer in base_model.layers:
    layer.trainable = False
# Add custom layers on top of ResNet
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(512, activation='relu')(x)
output = Dense(1, activation='linear')(x)  # For regression task (age prediction)

# Created the model
model = Model(inputs=base_model.input, outputs=output)
#compiled the model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])
# Trained the model
history = model.fit(
    train_generator,
    validation_data=validation_generator,
    epochs=10,  # Adjust the number of epochs as needed
    steps_per_epoch=len(train_generator),
    validation_steps=len(validation_generator),
    callbacks=[tf.keras.callbacks.EarlyStopping(patience=3, restore_best_weights=True)]
)
# Unfreezed l
for layer in base_model.layers[-10:]:  # Unfreeze last 10 layers
    layer.trainable = True

# Compiled again
model.compile(optimizer=tf.keras.optimizers.Adam(1e-5), loss='mse', metrics=['mae'])

# Continued training
history_fine = model.fit(
    train_generator,
    validation_data=validation_generator,
    epochs=5,  # Additional epochs for fine-tuning
    steps_per_epoch=len(train_generator),
    validation_steps=len(validation_generator)
)
# Tested the model
test_loss, test_mae = model.evaluate(test_generator)
print(f"Test MAE: {test_mae}")
# Saved the model
model.save('fine_tuned_resnet_model.h5')
